/*
 * Copyright 2024, Cypress Semiconductor Corporation (an Infineon company) or
 * an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 *
 * This software, including source code, documentation and related
 * materials ("Software") is owned by Cypress Semiconductor Corporation
 * or one of its affiliates ("Cypress") and is protected by and subject to
 * worldwide patent protection (United States and foreign),
 * United States copyright laws and international treaty provisions.
 * Therefore, you may use this Software only as provided in the license
 * agreement accompanying the software package from which you
 * obtained this Software ("EULA").
 * If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 * non-transferable license to copy, modify, and compile the Software
 * source code solely for use in connection with Cypress's
 * integrated circuit products.  Any reproduction, modification, translation,
 * compilation, or representation of this Software except as specified
 * above is prohibited without the express written permission of Cypress.
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
 * reserves the right to make changes to the Software without notice. Cypress
 * does not assume any liability arising out of the application or use of the
 * Software or any product or circuit described in the Software. Cypress does
 * not authorize its products for use in any products where a malfunction or
 * failure of the Cypress product may reasonably be expected to result in
 * significant property damage, injury or death ("High Risk Product"). By
 * including Cypress's product in a High Risk Product, the manufacturer
 * of such system or application assumes all risk of such use and in doing
 * so agrees to indemnify Cypress against all liability.
 */

/**
* @file cy_lpa_wifi_ol.h
* @brief Offload API called by Offload Manager.
*/

#ifndef OL_H__
#define OL_H__  (1)

#ifdef __cplusplus
extern "C" {
#endif

typedef struct ol_fns ol_fns_t;

/*******************************************************************************
* LPA Data Structures
*******************************************************************************/

/******************************************************************************/
/** \addtogroup group_lpa_structures *//** \{ */
/******************************************************************************/

/** Offload instance description table entry.
 * Defines a specific instance and configuration for an offload.
 * This entry may be automatically generated by a software configurator.
 * A table of entries made available to the Offload Manager. */
typedef struct ol_desc
{
    const char *name;           /**< Friendly name for debug (XXX: make debug only). */
    const void *cfg;            /**< Offload-specific configuration. */
    const struct ol_fns *fns;   /**< Offload-specific function pointers (extern'd by offloads). */
    void *ol;                   /**< Offload-specific instance (context) pointer. */
    void *worker_thread;        /**< Worker Thread used by Offload Manager. */
} ol_desc_t;

/** \} */

#ifdef __cplusplus
}
#endif

#endif /* !OL_H__ */

